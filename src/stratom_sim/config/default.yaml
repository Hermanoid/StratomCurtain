converter_costmap:
  converter_costmap:
    ros__parameters:
      update_frequency: 6.0
      publish_frequency: 2.0
      global_frame: odom
      robot_base_frame: base_link
      rolling_window: true
      width: 20
      height: 20
      resolution: 0.1
      robot_radius: 0.22
      plugins: ["obstacle_layer", "inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.55

      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          inf_is_valid: True
          data_type: "LaserScan"
          raytrace_max_range: 25.0
          raytrace_min_range: 0.04
          obstacle_max_range: 20.0
          obstacle_min_range: 0.04
      # static_layer:
      #   plugin: "nav2_costmap_2d::StaticLayer"
      #   map_subscribe_transient_local: True
      always_send_full_costmap: True

costmap_converter:
  # intra_node:
  #   ros__parameters:
  #     min_distance_between_blobs: 100
  #     alpha_slow: 0.1
  #     alpha_fast: 0.6
  costmap_converter:
    ros__parameters:
      converter_plugin: costmap_converter::CostmapToPolygonsDBSMCCH
      cluster_max_pts: 250
      cluster_mind_pts: 5
      cluster_max_distance: 0.5

py_tracker_node:
  ros__parameters:
    dynamic_memory_time: 1.2
    dynamic_movement_speed: 0.051
    dynamic_time_threshold: 0.6
    velocity_update_rate: 0.2
    curtain_publish_rate: 1.0
    # Polygon defining the boundary of the detection curtain
    # ROS2 is admittedly pretty dumb with array parameters, so this needs to be a dictionary.
    curtain_boundary:
      a: [-5.0, -5.0]
      b: [-5.0, 5.0]
      c: [5.0, 5.0]
      d: [5.0, -5.0]
